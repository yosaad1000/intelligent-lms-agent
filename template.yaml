AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: LMS API Backend - Serverless Lambda Functions

# Global configuration
Globals:
  Function:
    Timeout: 30
    Runtime: python3.11
    Architectures:
      - x86_64
    Environment:
      Variables:
        PINECONE_API_KEY: !Ref PineconeApiKey
        SUPABASE_URL: !Ref SupabaseUrl
        SUPABASE_ANON_KEY: !Ref SupabaseAnonKey
        AWS_REGION: !Ref AWS::Region

# Parameters
Parameters:
  PineconeApiKey:
    Type: String
    Description: Pinecone API Key
    NoEcho: true
  
  SupabaseUrl:
    Type: String
    Description: Supabase Project URL
    Default: https://scijpejtvneuqbhkoxuz.supabase.co
  
  SupabaseAnonKey:
    Type: String
    Description: Supabase Anonymous Key
    NoEcho: true

# Resources
Resources:
  # API Gateway
  LMSApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: LMSAuthorizer
        Authorizers:
          LMSAuthorizer:
            FunctionArn: 
          Fn::GetAtt: [AuthorizerFunction, Arn]

  # Lambda Authorizer Function
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/auth/
      Handler: authorizer.lambda_handler
      Description: Supabase JWT Token Authorizer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # Health Check Function
  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/health/
      Handler: health.lambda_handler
      Description: Health check endpoint
      Events:
        HealthApi:
          Type: Api
          Properties:
            RestApiId: !Ref LMSApi
            Path: /api/health
            Method: get
            Auth:
              Authorizer: NONE

  # File Processing Function
  FileProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/file_processing/
      Handler: file_handler.lambda_handler
      Description: File upload and RAG processing
      Timeout: 300
      MemorySize: 1024
      Events:
        FileUploadApi:
          Type: Api
          Properties:
            RestApiId: !Ref LMSApi
            Path: /api/files
            Method: post
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref DocumentsBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref UserFilesTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeAgent
              Resource: '*'

  # Chat Function
  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/chat/
      Handler: chat_handler.lambda_handler
      Description: AI Chat with RAG
      Timeout: 60
      MemorySize: 512
      Events:
        ChatApi:
          Type: Api
          Properties:
            RestApiId: !Ref LMSApi
            Path: /api/chat
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatConversationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatMessagesTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeAgent
              Resource: '*'

  # LangGraph Chat Function
  LangGraphChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/chat/
      Handler: langgraph_chat_handler.lambda_handler
      Description: LangChain + LangGraph AI Agent Chat
      Runtime: python3.9
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          BEDROCK_MODEL_ID: amazon.nova-micro-v1:0
          BEDROCK_EMBEDDING_MODEL_ID: amazon.titan-embed-text-v1
          BEDROCK_MAX_RETRIES: 3
          BEDROCK_RETRY_DELAY: 1.0
          BEDROCK_TIMEOUT_SECONDS: 30
          CHAT_HISTORY_TABLE: !Ref ChatMemoryTable
          DEBUG: true
          LOG_LEVEL: INFO
      Events:
        LangGraphChatApi:
          Type: Api
          Properties:
            RestApiId: !Ref LMSApi
            Path: /api/chat/langgraph
            Method: post
        LangGraphWorkflowApi:
          Type: Api
          Properties:
            RestApiId: !Ref LMSApi
            Path: /api/chat/workflow
            Method: get
        LangGraphToggleApi:
          Type: Api
          Properties:
            RestApiId: !Ref LMSApi
            Path: /api/chat/toggle
            Method: post
        LangGraphHistoryApi:
          Type: Api
          Properties:
            RestApiId: !Ref LMSApi
            Path: /api/chat/history
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatMemoryTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatConversationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatMessagesTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeAgent
                - bedrock:Retrieve
                - comprehend:DetectDominantLanguage
                - comprehend:DetectKeyPhrases
                - comprehend:DetectSentiment
                - comprehend:DetectEntities
                - translate:TranslateText
                - textract:StartDocumentTextDetection
                - textract:GetDocumentTextDetection
              Resource: '*'

  # S3 Bucket for Documents
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Sub: 'lms-documents-${AWS::AccountId}-${AWS::Region}'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB Tables
  UserFilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: lms-user-files
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: file_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: file_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ChatConversationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: lms-chat-conversations
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: conversation_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: subject_id
          AttributeType: S
      KeySchema:
        - AttributeName: conversation_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: user-subject-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: subject_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  ChatMessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: lms-chat-messages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: conversation_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: conversation_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # LangChain Memory Table
  ChatMemoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: lms-chat-memory
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

# Outputs
Outputs:
  LMSApiUrl:
    Description: API Gateway endpoint URL
    Value: 
      Fn::Sub: 'https://${LMSApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: 
        Fn::Sub: '${AWS::StackName}-ApiUrl'
  
  DocumentsBucketName:
    Description: S3 bucket for documents
    Value: !Ref DocumentsBucket
    Export:
      Name: 
        Fn::Sub: '${AWS::StackName}-DocumentsBucket'